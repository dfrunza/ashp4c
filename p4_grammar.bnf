
/** PROGRAM **/

<p4program> := { <declaration> | ';' /* empty declaration */ }*

<declaration> := <constantDeclaration> | <externDeclaration> | <actionDeclaration> |
  <parserDeclaration> | <typeDeclaration> | <controlDeclaration> | <instantiation> |
  <errorDeclaration> | <matchKindDeclaration> | <functionDeclaration>

<nonTypeName> := IDENTIFIER | APPLY | KEY | ACTIONS | STATE | ENTRIES | TYPE

<name> := <nonTypeName> | TYPE_IDENTIFIER

<nonTableKwName> := IDENTIFIER | TYPE_IDENTIFIER | APPLY | STATE | TYPE

<parameterList> := { <parameter> { ',' <parameter> }* }

<parameter> := <direction> <typeRef> <name> { '=' <expression> }

<direction> := { IN | OUT | INOUT }

<packageTypeDeclaration> := PACKAGE <name> <optTypeParameters> '(' <parameterList> ')'

<instantiation> := <typeRef> '(' <argumentList> ')' <name> ';'

<optConstructorParameters> := { '(' <parameterList> ')' }


/**  PARSER  **/

<parserDeclaration> := <parserTypeDeclaration> <optConstructorParameters>
  '{' <parserLocalElements> <parserStates> '}'

<parserTypeDeclaration> := PARSER <name> <optTypeParameters> '(' <parameterList> ')'

<parserLocalElements> := { <parserLocalElement> { <parserLocalElement> }* }

<parserLocalElement> := <constantDeclaration> | <variableDeclaration> | <instantiation> /* | <valueSetDeclaration> */

<parserStates> := <parserState> { <parserState> }*

<parserState> := STATE name '{' <parserStatements> <transitionStatement> '}'

<parserStatements> := { <parserStatement> { <parserStatement }* }

<parserStatement> := <assignmentOrMethodCallStatement> | <directApplication> | <parserBlockStatement> |
  <constantDeclaration> | <variableDeclaration> | <emptyStatement>

<parserBlockStatement> := '{' <parserStatements> '}'

<transitionStatement> := { TRANSITION <stateExpression> }

<stateExpression> := <name> ';' | <selectExpression>

<selectExpression> := SELECT '(' <expressionList> ')' '{' <selectCaseList> '}'

<selectCaseList> := { <selectCase> { <selectCase> }* }

<selectCase> := <keysetExpression> ':' <name> ';'

<keysetExpression> := <tupleKeysetExpression> | <simpleKeysetExpression>

<tupleKeysetExpression> := '(' <simpleKeysetExpression> { ',' <simpleKeysetExpression }* ')'

<simpleKeysetExpression> := <expression> /* { ( MASK | RANGE ) <expression> } */ | DEFAULT | DONTCARE

/* <valueSetDeclaration> := VALUESET '<' ( <baseType> | <tupleType> | <typeName> ) '>' '(' <expression> ')' <name> ';' */


/**  CONTROL  **/

<controlDeclaration> := <controlTypeDeclaration> <optConstructorParameters>
  '{' { <controlLocalDeclaration> }* APPLY <controlBody> '}'

<controlTypeDeclaration> := CONTROL <name> <optTypeParameters> '(' <parameterList> ')'

<controlLocalDeclaration> := <constantDeclaration> | <actionDeclaration> | <tableDeclaration> |
  <instantiation> | <variableDeclaration>

<controlBody> := <blockStatement>


/**  EXTERN  **/

<externDeclaration> := EXTERN (
    <nonTypeName> <optTypeParameters> '{' <methodPrototypes> '}' |
    <functionPrototype> ';'
  )

<methodPrototypes> := { <methodPrototype> }*

<functionPrototype> := <typeOrVoid> <name> <optTypeParameters> '(' <parameterList> ')'

<methodPrototype> :=
  <functionPrototype> ';' |
  TYPE_IDENTIFIER '(' <parameterList> ')' ';' /* constructor */


/**  TYPES  **/

<typeRef> := <baseType> | <namedType> | <tupleType>

<namedType> := <typeName> | <specializedType> | <headerStackType>

<typeName> := <prefixedType>

<prefixedType> := { '.' } TYPE_IDENTIFIER

<tupleType> := TUPLE '<' <typeArgumentList> '>'

<headerStackType> := <typeName> '[' <expression> ']'

<specializedType> := <typeName> '<' <typeArgumentList> '>'

<baseType> :=
  BOOL | ERROR |
  INT { '<' <integerTypeSize> '>' } |
  BIT { '<' <integerTypeSize> '>' } |
  VARBIT { '<' <integerTypeSize> '>' }

<integerTypeSize> := INTEGER /* | '(' <expression> ')' */

<typeOrVoid> := <typeRef> | VOID | IDENTIFIER  /* type parameter */

<optTypeParameters> := { '<' <typeParameterList> '>' }

<typeParameterList> := <name> { ',' <name> }*

<realTypeArg> := DONTCARE | <typeRef>

<typeArg> := DONTCARE | <typeRef> | <nonTypeName>

<realTypeArgumentList> := <realTypeArg> { ',' <realTypeArg> }*

<typeArgumentList> := { <typeArg> { ',' <typeArg> }* }

<typeDeclaration> := <derivedTypeDeclaration> | <typedefDeclaration> | <parserTypeDeclaration> ';'
  | <controlTypeDeclaration> ';' | <packageTypeDeclaration> ';'

<derivedTypeDeclaration> := <headerTypeDeclaration> | <headerUnionDeclaration> |
  <structTypeDeclaration> | <enumDeclaration>

<headerTypeDeclaration> := HEADER <name> '{' <structFieldList> '}'

<headerUnionDeclaration> := HEADER_UNION <name> '{' <structFieldList> '}'

<structTypeDeclaration> := STRUCT <name> '{' <structFieldList> '}'

<structFieldList> := { <structField> { ',' <structField> }* }

<structField> := <typeRef> <name> ';'

<enumDeclaration> := ENUM { BIT '<' INTEGER '>' } <name> '{' <specifiedIdentifierList> '}'

<errorDeclaration> := ERROR '{' <identifierList> '}'

<matchKindDeclaration> := MATCH_KIND '{' <identifierList> '}'

<identifierList> := <name> { ',' <name> }*

<specifiedIdentifierList> := <specifiedIdentifier> { ',' <specifiedIdentifier> }*

<specifiedIdentifier> := <name> { '=' <initializer> }

<typedefDeclaration> :=
  TYPEDEF ( <typeRef> | <derivedTypeDeclaration> ) <name> ';' |
  TYPE ( <typeRef> | <derivedTypeDeclaration> ) <name> ';'


/**  STATEMENTS  **/

<assignmentOrMethodCallStatement> := <lvalue> (
    { '<' <typeArgumentList> '>' } '(' <argumentList> ')' ';' |
    '=' <expression> ';'
  )

<emptyStatement> := ';'

<returnStatement> := RETURN { expression } ';'

<exitStatement> := EXIT ';'

<conditionalStatement> := IF '(' <expression> ')' <statement> { ELSE <statement> }

/* To support direct invocation of a control or parser without instantiation */
<directApplication> := <typeName> '.' APPLY '(' <argumentList> ')' ';'

<statement> := <assignmentOrMethodCallStatement> | <directApplication> | <conditionalStatement> |
  <emptyStatement> | <blockStatement> | <exitStatement> | <returnStatement> | <switchStatement>

<blockStatement> := '{' <statementOrDeclList> '}'

<statementOrDeclaration> := <variableDeclaration> | <constantDeclaration> | <statement> | <instantiation>

<statementOrDeclList> := { <statementOrDeclaration> }*

<switchStatement> := SWITCH '(' <expression> ')' '{' <switchCases> '}'

<switchCases> := { <switchCase> }*

<switchCase> := <switchLabel> ':' { <blockStatement> }

<switchLabel> := <name> | DEFAULT


/**  TABLES  **/

<tableDeclaration> := TABLE <name> '{' <tablePropertyList> '}'

<tablePropertyList> := <tableProperty> { <tableProperty> }*

<tableProperty> :=
  KEY '=' '{' <keyElementList> '}' |
  ACTIONS '=' '{' <actionList> '}' |
  CONST ENTRIES '=' '{' <entriesList> '}' |  /* immutable entries */
  { CONST } <nonTableKwName> '=' <initializer> ';'

<keyElementList> := { <keyElement> }*

<keyElement> := <expression> ':' <name> ';'

<actionList> := { <actionRef> ';' }*

<actionRef> := <prefixedNonTypeName> { '(' <argumentList> ')' }

<entriesList> := <entry> { <entry> }*

<entry> := <keysetExpression> ':' <actionRef> ';'

<actionDeclaration> := ACTION <name> '(' <parameterList> ')' <blockStatement>


/**  VARIABLES  **/

<variableDeclaration> := <typeRef> <name> <optInitializer> ';'

<constantDeclaration> := CONST <typeRef> <name> '=' <initializer> ';'

<optInitializer> := { '=' <initializer> }

<initializer> := <expression>


/**  EXPRESSIONS  **/

<functionDeclaration> := <functionPrototype> <blockStatement>

<argumentList> := { <argument> { ',' <argument> } }

<argument> := <expression> | <name> '=' <expression> | DONTCARE

/* <kvList> := <kvPair> { ',' <kvPair> }* */

<kvPair> := <name> '=' <expression>

<expressionList> := { <expression> { ',' <expression> }* }

<member> := <name>

<prefixedNonTypeName> := { '.' } <nonTypeName>

<lvalue> := <prefixedNonTypeName> {
    '.' <member> |
    '[' <expression> { ':' <expression> } ']'  /* array subscript */
  }*

<expression> := <expressionPrimary> { <exprOperator> <expression> }*

<expressionPrimary> := INTEGER | TRUE | FALSE | STRING_LITERAL |
  { '.' } <nonTypeName> |
  '{' <expressionList> '}' /* | <kvList> */ |
  '(' <expression> ')' |
  ( '!' | '~' | '-' ) <expression> |
  ( <typeName> | ERROR ) '.' <member> |
  <namedType> '(' <argumentList> ')' |
  '(' <typeRef> ')' <expression>  /* cast */

<exprOperator> := <binaryOperator> |
  '.' <member> |
  '[' <expression> { ':' <expression> } ']' |  /* array subscript */
  '(' <argumentList> ')' |  /* function call */
  '<' <realTypeArgumentList> '>'

<binaryOperator> := '*' | '/' | '+' | '-' | '<=' | '>=' | '<' | '>' | '!=' |
  '==' | '||' | '&&' | '|' | '&' | '<<' | '>>' | '='

